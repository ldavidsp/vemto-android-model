package <$ this.packageAndroid $>.api

<# TEMPLATE VARIABLES #>
<% let modelName = this.model.name %>

import android.util.Log
import androidx.multidex.BuildConfig
import <$ this.packageAndroid $>.helpers.ApiHelper.apiVersion
import <$ this.packageAndroid $>.helpers.ApiHelper.debug
import <$ this.packageAndroid $>.helpers.ApiHelper.localUrl
import <$ this.packageAndroid $>.helpers.ApiHelper.prodUrl
import io.ktor.client.HttpClient
import io.ktor.client.engine.android.Android
import io.ktor.client.plugins.DefaultRequest
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.plugins.logging.LogLevel
import io.ktor.client.plugins.logging.Logger
import io.ktor.client.plugins.logging.Logging
import io.ktor.client.plugins.observer.ResponseObserver
import io.ktor.client.request.header
import io.ktor.http.ContentType
import io.ktor.http.HttpHeaders
import io.ktor.http.path
import io.ktor.serialization.kotlinx.json.json
import kotlinx.serialization.json.Json
import javax.inject.Inject

/**
 * Homeflow Technologies | HFKtorHttpClient.
 *
 * @constructor
 */
class HFKtorHttpClient @Inject constructor() {

  /**
   * Get http client.
   *
   * @return HttpClient
   */
  fun getHttpClient() = HttpClient(Android) {
    install(DefaultRequest) {
      header(HttpHeaders.ContentType, ContentType.Application.Json)
      header(HttpHeaders.Authorization, "Bearer 63hsy7333777wu33j738sj83js8383")
      url {
        host = when (BuildConfig.BUILD_TYPE) {
          debug -> localUrl
          else -> prodUrl
        }
        path(apiVersion)
      }
    }

    /**
     * Install content negotiation.
     */
    install(ContentNegotiation) {
      json(Json {
        prettyPrint = true
        isLenient = true
        ignoreUnknownKeys = true
      })

      engine {
        connectTimeout = TIME_OUT
        socketTimeout = TIME_OUT
      }
    }

    /**
     * Install logging.
     */
    install(Logging) {
      logger = object : Logger {
        override fun log(message: String) {
          if (BuildConfig.DEBUG) {
            Log.v(TAG_KTOR_LOGGER, message)
          }
        }

      }
      level = LogLevel.ALL
    }

    /**
     * Install response observer.
     */
    install(ResponseObserver) {
      onResponse { response ->
        if (BuildConfig.DEBUG) {
          Log.d(TAG_HTTP_STATUS_LOGGER, "${response.status.value}")
        }
      }
    }
  }

  /**
   * Get url.
   *
   * @return String
   */
  fun getUrl(): String {
    return when (BuildConfig.BUILD_TYPE) {
      debug -> localUrl
      else -> prodUrl
    }
  }

  /**
   * Get url.
   *
   * @return String
   */
  fun getApiUrl(): String {
    return when (BuildConfig.BUILD_TYPE) {
      debug -> localUrl + apiVersion
      else -> prodUrl + apiVersion
    }
  }

  /**
   * Companion
   *
   * @constructor Create empty Companion
   */
  companion object {
    private const val TIME_OUT = 10_000
    private const val TAG_KTOR_LOGGER = "ktor_logger:"
    private const val TAG_HTTP_STATUS_LOGGER = "http_status:"
  }
}

